---
## Section to check Precheck on Production Sites

- name: Check 0 - Prod Pre Health Check
  hosts: prod
  gather_facts: false 
  tasks:
    
     - name: Check Prod Server Health
       ping:
       register: ping_status1

     - name: Display Prod Server reachability Status
       debug:
         msg: "Server {{ inventory_hostname }} is {{ 'reachable' if ping_status1.ping else 'unreachable' }}"


     - name: Setting rules in Prod Servers
       shell: |
          iptables -F
          iptables-save
          systemctl stop firewalld.service
          setenforce 0
          iptables -L
       register: precheck_status

     - name: Sv1
       shell: |
           systemctl start haproxy.service
       register: sv1_status
       ignore_errors: true
       when: inventory_hostname == "prodloadbalancer"
    
     - name: Sv2
       shell: |
           systemctl start httpd.service
       register: sv2_status
       ignore_errors: true
       when: inventory_hostname in groups["prodwebserver"]
     
     - name: Sv3
       shell: |
           systemctl start haproxy.service
           systemctl start keepalived.service
       register: sv1_status
       ignore_errors: true
       when: inventory_hostname in groups["proddb"]

     - name: Debug of Pre-Checks
       debug:
         msg: 
         - "Status of Services are : {{ precheck_status }}"

## Section to Check Web HAproxy status and health

- name: Check 1 - Check Web Load Balancer Status
  hosts: prodloadbalancer
  vars:
    plbip: 192.168.8.35
  gather_facts: false
  tasks:

    - name: Check Web Load Balancer health
      shell: |
        systemctl is-active haproxy.service
      register: haproxy_status
      ignore_errors: true

    - name: Check url status of webserver 
      uri:
        url: http://{{ plbip }}/insert.php
        return_content: no
      register: haproxyurl_status
      until: haproxyurl_status.status == 200
      retries: 5
      delay: 5
      ignore_errors: true
        
    - name: Print Status of Web Load Balancer
      debug:
        msg:
        - "HAProxy Service are  : {{ haproxy_status.stdout }}"
        - "HAProxy Url are : {{ haproxyurl_status.status }}"


## Section to Check httpd service and health

- name: Check 2 - Check Web Serivce Status 
  hosts: prodwebserver
  vars:
    webip:
      - 192.168.8.37
      - 192.168.8.38
  gather_facts: false
  tasks:

    - name: Check WebServer health
      shell: |
        systemctl is-active httpd.service
      register: webserver_status
      ignore_errors: true
 
    - name: Check url status of WebServer
      uri:
        url: http://{{ item }}/insert.php
        return_content: no
      register: webserverurl_status
      until: webserverurl_status.status == 200
      retries: 5
      delay: 5
      loop: "{{ webip }}"
      ignore_errors: true

    - name: Print status if all services are working fine
      debug:
        msg:
        - "WebServer Service are  : {{ webserver_status.stdout }}"
        - "WebServer Url are  : {{ webserverurl_status }}"

## Section to Check Mariadb Service and Health

- name: Check 3 - Check DB Service Status
  hosts: proddb
  gather_facts: false
  tasks:

    - name: Check MariaDB health
      shell: |
        systemctl is-active mariadb.service 
      register: db_status
      ignore_errors: true

    - name: Print status if all services are working fine
      debug:
        msg: 
        - "DBService are : {{ db_status.stdout }}"

## Section to check Precheck on DR Site

- name: Check 4 - DR Pre Health Check
  hosts: dr
  gather_facts: false
  tasks:
    
    - name: Check Prod Server Health
      ping:
      register: ping_status2

    - name: Display Prod Server reachability Status
      debug:
        msg: "Server {{ inventory_hostname }} is {{ 'reachable' if ping_status2.ping else 'unreachable' }}"
 
    - name: Sv4
      shell: |
          systemctl stop haproxy.service
      register: sv1_status
      ignore_errors: true
      when: inventory_hostname in groups["drloadbalancer"]

    - name: Sv5
      shell: |
          systemctl stop httpd.service
      register: sv2_status
      ignore_errors: true
      when: inventory_hostname in groups["drwebserver"]

    - name: Sv6
      shell: |
          systemctl stop haproxy.service
          systemctl stop keepalived.service
      register: sv1_status
      ignore_errors: true
      when: inventory_hostname in groups["drdb"]

    - name: Setting rules in DR Servers
      shell: |
          iptables -F
          iptables-save
          systemctl stop firewalld.service
          setenforce 0
          iptables -L
      register: precheck_status2

    - name: Debug of Pre-Checks
      debug:
        msg:
        - "Status of Services are : {{ precheck_status2 }}"

## Moving Services from Production to DR Servers ##

- name: Check 5 - Preparing for Service Migration to DR
  hosts: prod
  gather_facts: false
  tasks:
    ## Stopping and Disbale - Web Load Balancer 
    - name: Stopping Load Balancer Service
      shell: | 
          systemctl stop haproxy.service
      register: haproxystop_status
      ignore_errors: true
      when: inventory_hostname in groups["prodloadbalancer"]
    
    - name: Disabelling Load Balancer Service auto Start
      shell: |
          systemctl disable haproxy.service
      register: haproxtautostart_status
      ignore_errors: true
      when: inventory_hostname in groups["prodloadbalancer"]
    
    - name: Stopping Load Balancer Service
      shell: | 
          systemctl is-active haproxy.service
      register: haproxystop2_status
      ignore_errors: true
      when: inventory_hostname in groups["prodloadbalancer"]

    - name: Status of HAproxy Service
      debug:
        msg:
        - "Haproxy Service Stopped Succesfully : {{ haproxystop2_status.stdout }}"
      when: inventory_hostname in groups["prodloadbalancer"]


   ## Stopping and Disable - Web Services on Webservers

    - name: Stopping services in web server 
      shell: |
          systemctl stop httpd.service
      register: webservicestop_status
      ignore_errors: true
      when: inventory_hostname in groups["prodwebserver"]

    - name: Disable Web Service auto Start 
      shell: |
          systemctl disable httpd.service
      register: webserviceautostart_status
      ignore_errors: true
      when: inventory_hostname in groups["prodwebserver"]

    - name: Stopping webserver Service
      shell: |
          systemctl is-active httpd.service
      register: webservicestop2_status
      ignore_errors: true
      when: inventory_hostname in groups["prodwebserver"]

    - name: Status of stopped webserver Service
      debug:
        msg:
        - "Webservice Stopped Succesfully : {{ webservicestop2_status.stdout }}"
      when: inventory_hostname in groups["prodwebserver"]

  ## Stopping and disable DB Load Balancer
    - name: Stopping DB LoadBalancer and virtual routing
      shell: |
          systemctl stop haproxy.service
          systemctl stop keepalived.service
      register: dbhaproxystop_status
      ignore_errors: true
      when: inventory_hostname in groups["proddb"]

    - name: Disabelling DB Load Balancer Service auto Start
      shell: |
          systemctl disable haproxy.service
          systemctl disable keepalived.service
      register: dbhaproxyautostart_status
      ignore_errors: true
      when: inventory_hostname in groups["proddb"]

    - name: Stopping Load Balancer and virtual routing Service
      shell: |
          systemctl is-active haproxy.service
          systemctl is-active keepalived.service
      register: dblbservicestop_status
      ignore_errors: true
      when: inventory_hostname in groups["proddb"]

    - name: Status of stopped DB Load Balancer &  virtual routing Service
      debug:
        msg:
        - "Load Balancer and Virtual Routing Stopped : {{ dblbservicestop_status.stdout }}"
      when: inventory_hostname in groups["proddb"]

  ## Checking Prod DB and Replication Status
    - name: Check MariaDB health
      shell: |
          systemctl is-active mariadb.service
      register: mariadb_status
      ignore_errors: true
      when: inventory_hostname in groups["proddb"]

    - name: Check MariaDB replication status
      shell: |
          mysql -uroot -predhat -e "SHOW SLAVE STATUS\G"
      register: mariadb_replication
      ignore_errors: true
      when: inventory_hostname in groups["proddb"]

    - name: Status of stopped haproxy and virtual routing Service
      debug:
        msg:
        - "Replication Status : {{ mariadb_replication.stdout }}"
      when: inventory_hostname in groups["proddb"]

 #   - name: Generate html report for Status
  #    shell: >
   #       echo "<html><body><h1>Health Report</h1><h2>Host:
    #      {{ inventory_hostname }}</h2><ul><li>HAProxy and Webserver:
     #     {{ 'Running' if webservicestop2_status|active else 'Not Running' }}</li><li>
      #    MariaDB: {{ 'Running' if mariadb_status|active else 'Not Running' }}</li><li>MariaDB Replication:
       #   {{ 'Running' if mariadb_replication|success else 'Not Running' }}</li></ul></body></html>" > health_report.html
      #delegate_to: localhost
      #run_once: true
      #ignore_errors: true

## Starting Services to DR Site ##

- name: Check 6 - Starting Services on DR Site
  hosts: dr
  gather_facts: false
  tasks:
    
    - name: Start Web Loadbalancer Service 
      shell: |
          systemctl start haproxy.service
          systemctl is-active haproxy.service
      register: drhaproxy_status
      ignore_errors: true
      when: inventory_hostname in groups["drloadbalancer"]

    - name: DR Load Balancer Service Status
      debug:
        msg:
        - " DR Load Balancer are : {{ drhaproxy_status.stdout }}"
      when: inventory_hostname in groups["drloadbalancer"]

    - name: Start Web Services
      shell: |
          systemctl start httpd.service
      register: drwebservice_status
      ignore_errors: true
      when: inventory_hostname in groups["drwebserver"]

    - name: Check Web Services start
      shell: |
          systemctl is-active httpd.service
      register: drwebservice2_status
      ignore_errors: true
      when: inventory_hostname in groups["drwebserver"]
    
    - name: DR Web Server status
      debug:
        msg:
        - " DR web server are : {{ drwebservice2_status }}"
      when: inventory_hostname in groups["drwebserver"]

## Section to Check Mariadb Service and Health

- name: Check 7 - Check DR DB Service Status
  hosts: drdb
  gather_facts: false
  tasks:

    - name: Check MariaDB health
      shell: |
        systemctl is-active mariadb.service
      register: drdb_status
      ignore_errors: true

    - name: Print status if all services are working fine
      debug:
        msg:
        - "DBService are : {{ drdb_status.stdout }}"
    
    - name: Starting DB LoadBalancer and virtual routing
      shell: |
          systemctl start haproxy.service
          systemctl start keepalived.service
      register: dbhaproxystart_status
      ignore_errors: true

    - name: Disabelling DB Load Balancer Service auto Start
      shell: |
          systemctl disable haproxy.service
          systemctl disable keepalived.service
      register: dbhaproxyautostart_status
      ignore_errors: true

    - name: Check Load Balancer and virtual routing Service
      shell: |
          systemctl is-active haproxy.service
          systemctl is-active keepalived.service
      register: drdblbservicestart_status
      ignore_errors: true

    - name: Status of stopped DB Load Balancer &  virtual routing Service
      debug:
        msg:
        - "Load Balancer and Virtual Routing are : {{ drdblbservicestart_status.stdout }}"
    
    - name: Check MariaDB replication status
      shell: |
          mysql -uroot -predhat -e "SHOW SLAVE STATUS\G"
      register: mariadbdr_replication
      ignore_errors: true

    - name: Status of stopped haproxy and virtual routing Service
      debug:
        msg:
        - "Replication Status : {{ mariadbdr_replication.stdout }}"


## Section to check httpd service and health

- name: Check 8 - Check web Service Status 
  hosts: drwebserver
  gather_facts: false
  vars:
    drwebip:
      - 192.168.8.41
      - 192.168.8.42
  tasks:

    - name: Check Url accessiblity - From Web Servers 
      uri:
        url: http://{{ item }}/insert.php
        return_content: no
      register: drwebserverurl_status
      until: drwebserverurl_status.status == 200
      retries: 2
      delay: 2
      loop: "{{ drwebip }}"
      ignore_errors: true

    - name: Web Url Status
      debug:
        msg:
        - "Web Url Status : {{ drwebserverurl_status }}"

## Section to check Loadbalancer Service and Health

- name: Check 9 - Check Web Service From Load Balancer
  hosts: localhost
  gather_facts: false
  #vars:
   # drlbip:
    #  - 192.168.56.115
  tasks:

    - name: Check Url accessibility - From Load Balancer
      uri:
        url: http://192.168.8.36/insert.php
        return_content: no
      register: drloadbalancerurl_status
      until:  drloadbalancerurl_status.status == 200
      retries: 5
      delay: 5
      ignore_errors: true

    - name: Load Balancer Url Status
      debug:
        msg:
        - "DR Load Balancer Web Url Status : {{ drloadbalancerurl_status }}"
        

  

 


        
